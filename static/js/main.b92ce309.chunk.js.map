{"version":3,"sources":["components/Display.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","state","result","input","this","className","React","Component","App","subtract","setState","addUserInput","event","target","value","console","log","handleButton","handleCalc","operation","previousValue","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92ce309.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React from \"react\";\nimport \"./Display.css\"\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: this.props.input,\n    };\n  }\n  render() {\n    let {result} = this.props \n    return(<div className=\"display\">\n    //   {this.props.input}\n    // </div>)\n    }\n  }\n// const Display = (props) =>\n// <div className=\"display\">\n//   {props.input}\n// </div>;\n\nexport default Display;","  import React from 'react';                                 \n  import './App.css'\n  import Display from \"./components/Display.js\"\n  // import Keypad from './components/Keypad'\n  import ClearButton from './components/ClearButton'\n\n\n  class App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        input: '',\n        // displayValue (What the screen currently displays)\n        //displayValue: '0',\n        // previousValue (What value the user selected before pressing an operation button)\n        previousValue: [],\n        // operation (What operation the user is performing (+/-/รท/x))\n        //operation: '',\n        result: '',\n        operation: '',\n      };\n    }\n\n    subtract = () => {\n      this.setState({\n        input: this.state.input - 1,\n      });\n    }\n    \n    addUserInput = (event) => {\n      this.setState({\n        input: this.state.input + event.target.value,\n        // input: [...this.state.input, event.target.innerText],\n        // result: event.target.value,\n      })\n      console.log(event.target.value);\n    }; \n\n    handleButton = (event) => {\n      if (event.target.value === '=') {\n        this.handleCalc();\n      } else if (event.target.value === '+') {\n        this.setState({\n          operation: '+',\n          result: this.state.input + event.target.value,\n        });\n      }\n      console.log(event.target.value);\n    };\n\n    handleCalc = (event) => {\n      if (event === '+') {\n        this.setState({\n          result: event.target.value + event.target.value,\n        });\n      }\n    };\n\n      render() {\n        return (\n          <div className='app'>\n            <div className='container'> \n\n              <Display input={this.state.input}/>\n\n              <div className='row'>\n                <button \n                value='7' onClick={this.addUserInput}>7 \n                </button> \n\n                <button \n                value='8' onClick={this.addUserInput}>8\n                </button>  \n\n                <button \n                value='9' onClick={this.addUserInput}>9\n                </button>  \n\n                <button \n                value='/' onClick={this.addUserInput}>/\n                </button>  \n              </div>\n\n              <div className='row'>\n                <button \n                value='4' onClick={this.addUserInput}>4\n                </button>  \n                <button \n                value='5' onClick={this.addUserInput}>5\n                </button>  \n                <button \n                value='6' onClick={this.addUserInput}>6\n                </button>  \n                <button \n                value='*' onClick={this.addUserInput}>*\n                </button>  \n              </div>\n\n              <div className='row'>\n                <button value='1' onClick={this.addUserInput}>1\n                </button>  \n                <button \n                value='2' onClick={this.addUserInput}>2\n                </button>  \n                <button \n                value='3' onClick={this.addUserInput}>3\n                </button>  \n                <button\n                value='+' onClick={this.addUserInput}>+\n                </button>  \n              </div>\n\n              <div className='row'>\n                <button \n                value=',' onClick={this.addUserInput}>,\n                </button>  \n                <button \n                value='0' onClick={this.addUserInput}>0\n                </button>  \n                <button \n                value='=' onClick={this.addUserInput}>=\n                </button>  \n                <button \n                value='-'\n                onClick={this.addUserInput}>-\n                </button>  \n              </div>\n               \n              <div className='row'>\n              <button value='AC' onClick={() => this.setState({ input: '' })}>\n            {/* <ClearButton handleClear={() => this.setState({ input: '' })}> */}\n              AC\n            </button>\n              </div>  \n            </div>\n          </div>  \n      );\n    }\n  }\n\n    export default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}